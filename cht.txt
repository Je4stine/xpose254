import { StyleSheet, Text, View } from 'react-native';
import React,{useCallback, useState, useEffect} from 'react';

// import { GiftedChat} from 'react-native-gifted-chat';
// import AsyncStorage from '@react-native-async-storage/async-storage';
// import firebaseConfig from '../../firebaseConfig';
// // import * as firebase from 'firebase';
// import 'firebase/firestore';
// // import { } from 'firebase/<service>';


// const db = firebase.firestore();
// const Refs = db.collection('profile');

// const [message, setmessage] = useState([]);

// useEffect(() => {
//   const unsubscribe = Refs.onSnapshot(querySnapshot => {
//     const messagesFirestore = querySnapshot.docChanges().filter(({type}) => type === 'added').map(({doc})=>{
//       const messages = doc.data();
//       return {...messages, createdAt:messages.createdAt.toDate()}
//     }).sort((a,b)=>b.createdAt.getTime() - a.createdAt.getTime())
//     appendMessages(messagesFirestore);
//   });
//   return()=> unsubscribe()
// }, []);

// const appendMessages = useCallback((message)=> {
//   setmessage((previousMessage)=> GiftedChat.append(previousMessage, message))
// },[message]);

// async function handleSend (message){
//   const writes = message.map(m=>Refs.add(m));
//   await Promise.all(writes);
// };


export default function Chat() {
  return (
    <View><Text>Me</Text></View>
      // <GiftedChat
      // messages={message}
      // // user={}
      // onSend={()=>{handleSend}}
      // />
  )
};

const styles = StyleSheet.create({
    
});




const uploadImage = async () => {
    const fileExtension = setUserState.image;
    const fileName = `${fileExtension}`;
    const storageRef = firebase.storage().ref(`profile/${fileName}`);
    storageRef.putFile(setUserState.image)
      .on(
        firebase.storage.TaskEvent.STATE_CHANGED,
        snapshot => {
          const progress = Math.round(
            (snapshot.bytesTransferred / snapshot.totalBytes) * 100
          );
          console.log(progress);
        },error => {
          console.log(error);
        },
        () => {
          storageRef.getDownloadURL()
            .then((downloadUrl) => {
              console.log("File available at: " + downloadUrl);
              setUserState.image = downloadUrl;
            })
        }
      )
  }




// function addItems(){
//     setUserState.createdAt = firebase.firestore.FieldValue.serverTimestamp();

//     firebase.firestore()
//     .collection('profile')
//     .add(setUserState)
//     .then((snapshot) => {
//         setUserState.id = snapshot.id;
//         snapshot.set(userState);
//     })
// }



Latest

const uploadImage = async () => {
    if( image == null ) {
      return null;
    }
    const uploadUri = image;
    let filename = uploadUri.substring(uploadUri.lastIndexOf('/') + 1);

    // Add timestamp to File Name
    const extension = filename.split('.').pop(); 
    const name = filename.split('.').slice(0, -1).join('.');
    filename = name + Date.now() + '.' + extension;

    setUploading(true);
    setTransferred(0);

    const storageRef = storage().ref(`photos/${filename}`);
    const task = storageRef.putFile(uploadUri);

    // Set transferred state
    task.on('state_changed', (taskSnapshot) => {
      console.log(
        `${taskSnapshot.bytesTransferred} transferred out of ${taskSnapshot.totalBytes}`,
      );

      setTransferred(
        Math.round(taskSnapshot.bytesTransferred / taskSnapshot.totalBytes) *
          100,
      );
    });

    try {
      await task;

      const url = await storageRef.getDownloadURL();

      setUploading(false);
      setImage(null);

      // Alert.alert(
      //   'Image uploaded!',
      //   'Your image has been uploaded to the Firebase Cloud Storage Successfully!',
      // );
      return url;

    } catch (e) {
      console.log(e);
      return null;
    }

  };
  

  working

   // const uploadImage = async () => {

  //   const blob = await new Promise((resolve, reject) => {
  //     const xhr = new XMLHttpRequest();
  //     xhr.onload = function() {
  //       resolve(xhr.response);
  //     };
  //     xhr.onerror = function(e) {
  //       console.log(e);
  //       reject(new TypeError('Network request failed'));
  //     };
  //     xhr.responseType = 'blob';
  //     xhr.open('GET', image, true);
  //     xhr.send(null);
  //   });

  //   const ref =db.storage().ref().child('profile/'+ new Date().toString()+'.jpg');
  //   const snapshot = await ref.putFile(blob);
  //   const url = await snapshot.ref.getDownloadURL();
  //   setUserState({...userState, image:url});
  //   console.log(url);
  // }
  